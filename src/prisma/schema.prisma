// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  title          String
  subtitle       String?
  noOfViews      Int           @default(0)
  // segments
  segments       PostSegment[]
  // category
  category       PostCategory  @relation(fields: [postCategoryId], references: [id])
  postCategoryId String
  //
  // tags
  tags           PostTag[]
  //
  // user
  author         User          @relation("AuthorPost", fields: [authorId], references: [userId])
  authorId       String
  //
  // comments
  comments       PostComment[] @relation("PostComments")
  //
  // likes
  likedBy        User[]        @relation("PostLikes")
  //
}

model PostComment {
  commentId       String        @id @default(cuid())
  text            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  // post
  Post            Post          @relation("PostComments", fields: [postId], references: [id])
  postId          String
  // comment tree
  commentParentId String?
  commentParent   PostComment?  @relation("CommentParent", fields: [commentParentId], references: [commentId])
  commentChilds   PostComment[] @relation("CommentParent")
  // author
  author          User          @relation("PostCommentAuthor", fields: [authorId], references: [userId])
  authorId        String
  // upvotes
  upvotedBy       User[]        @relation("PostCommentUpvotes")
  // downvotes
  downvotedBy     User[]        @relation("PostCommentDownvotes")
}

model PostSegment {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  title     String
  subtitle  String?
  imageId   String?
  items     PostSegmentItem[]
  // for Post.segments
  Post      Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  //
}

model PostSegmentItem {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  content       String
  // for PostSegment.items
  PostSegment   PostSegment @relation(fields: [postSegmentId], references: [id], onDelete: Cascade)
  postSegmentId String
  //
}

model PostCategory {
  id          String @id
  name        String
  description String
  Post        Post[]
}

model PostTag {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       String
  description String
  // post
  posts       Post[]
  //
}

model User {
  userId            String         @id @default(cuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  username          String         @unique
  imageId           String?
  imageBlurDataURL  String?
  // posts
  posts             Post[]         @relation("AuthorPost")
  // comments
  PostComment       PostComment[]  @relation("PostCommentAuthor")
  // likes
  likedPosts        Post[]         @relation("PostLikes")
  // upvotes
  upvotedComments   PostComment[]  @relation("PostCommentUpvotes")
  // downvotes
  downvotedComments PostComment[]  @relation("PostCommentDownvotes")
  // donation links
  donationLinks     DonationLink[] @relation("UserDonationLinks")
}

model DonationLink {
  donationLinkId     String             @id @default(cuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  address            String
  // user relation
  User               User               @relation("UserDonationLinks", fields: [userId], references: [userId])
  userId             String
  // donation provider relation
  donationProvider   DonationProvider   @relation("DonationLink_DonationProvider", fields: [donationProviderId], references: [donationProviderId])
  donationProviderId DonationProviderId
}

enum DonationProviderId {
  PAYPAL
  BITCOIN
}

model DonationProvider {
  donationProviderId DonationProviderId @id
  name               String
  // donation links relation
  DonationLink       DonationLink[]     @relation("DonationLink_DonationProvider")
}
