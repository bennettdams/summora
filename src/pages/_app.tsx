import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import { Analytics } from '@vercel/analytics/react'
import { SpeedInsights } from '@vercel/speed-insights/next'
import { type Session } from 'next-auth'
import { SessionProvider } from 'next-auth/react'
import { type AppType } from 'next/app'
import { DM_Serif_Display, Nunito } from 'next/font/google'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useEffect, useRef } from 'react'
import { Footer } from '../components/Footer'
import { Header } from '../components/Header'
import { ErrorBoundary } from '../components/error'
import '../styles/globals.css'
import { trpc } from '../util/trpc'

const globalFont = Nunito({
  subsets: ['latin'],
  weight: ['400', '500', '600', '800'],
  variable: '--global-summora-font',
  display: 'swap',
})

const globalFontSerif = DM_Serif_Display({
  subsets: ['latin'],
  weight: ['400'],
  variable: '--global-summora-font-serif',
  display: 'swap',
})

const App: AppType<{ session: Session | null }> = ({
  Component,
  pageProps: { session, ...pageProps },
}) => {
  const router = useRouter()

  /**
   * This is a hack to automatically scroll to the top of a page when the user navigates
   * to another route.
   * Usually this is done via `Link`'s `scroll` attribute. In our case, it is not the page who
   * is scrollable, but only the container containing the page content, so we have to do it manually.
   * See: https://github.com/vercel/next.js/discussions/45715
   */
  const mainContentRef = useRef<HTMLDivElement>(null)
  useEffect(() => {
    router.events.on('routeChangeComplete', () => {
      if (mainContentRef.current) {
        mainContentRef.current.scrollTop = 0
      }
    })
  }, [router.events])

  // const [queryClient] = useState(() => new QueryClient())

  return (
    <ErrorBoundary>
      <ReactQueryDevtools initialIsOpen={true} />
      <SessionProvider session={session}>
        {/* tRPC already brings the `QueryClientProvider` */}
        {/* https://github.com/trpc/trpc/discussions/1594#discussioncomment-2303573 */}
        {/* <QueryClientProvider client={queryClient}> */}
        <Head>
          <title>Summora</title>
          <link rel="icon" href="/favicon.ico" />

          {/* <!-- HTML Meta Tags --> */}
          <meta
            name="description"
            content="Everything, in summary. An endless stream of articles for any category, generated by users. Less fluff, more facts."
          />

          {/* <!-- Facebook Meta Tags --> */}
          <meta property="og:url" content="https://www.summora.com" />
          <meta property="og:type" content="website" />
          <meta property="og:title" content="Everything, in summary." />
          <meta
            property="og:description"
            content="An endless stream of articles for any category, generated by users. Less fluff, more facts."
          />
          <meta
            property="og:image"
            content="https://www.summora.com/og-summora-230411.png"
          />

          {/* <!-- Twitter Meta Tags --> */}
          <meta name="twitter:card" content="summary_large_image" />
          <meta property="twitter:domain" content="summora.com" />
          <meta property="twitter:url" content="https://www.summora.com" />
          <meta name="twitter:title" content="Everything, in summary." />
          <meta
            name="twitter:description"
            content="An endless stream of articles for any category, generated by users. Less fluff, more facts."
          />
          <meta
            name="twitter:image"
            content="https://www.summora.com/og-summora-230411.png"
          />
        </Head>

        {/* This is a hack needed for `next/font` being loaded in React portals (like our modal).
         * See: https://github.com/vercel/next.js/issues/43674
         */}
        <style jsx global>{`
          :root {
            --global-summora-font: ${globalFont.style.fontFamily};
            --global-summora-font-serif: ${globalFontSerif.style.fontFamily};
          }
        `}</style>

        <div
          className={`${globalFont.variable} ${globalFontSerif.variable} font-light flex h-screen min-h-screen flex-col bg-gradient-to-b from-dlight via-dsecondary/25 to-dlight font-sans text-gray-500 decoration-dsecondary caret-dprimary selection:bg-dprimary selection:text-dtertiary`}
        >
          <Header />

          <div className="flex-grow overflow-y-auto">
            {/* Horizontal overflow disabled because on iOS Safari the user would move the page while scrolling vertically otherwise. */}
            <main ref={mainContentRef} className="h-full overflow-x-hidden">
              {/* boundary to catch errors where we can still show some UI (like the header and footer) */}
              <ErrorBoundary>
                {/* <TailwindCSSBreakpoint /> */}
                <Component {...pageProps} />
                <SpeedInsights />
                <Analytics />
              </ErrorBoundary>
            </main>
          </div>

          <Footer />
        </div>
        {/* </QueryClientProvider> */}
      </SessionProvider>
    </ErrorBoundary>
  )
}

export default trpc.withTRPC(App)
