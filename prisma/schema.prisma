// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  title          String
  subtitle       String?
  noOfViews      Int           @default(0)
  // segments
  segments       PostSegment[]
  // category
  category       PostCategory  @relation("Post_PostCategory", fields: [postCategoryId], references: [id])
  postCategoryId String
  //
  // tags
  tags           PostTag[]
  //
  // user
  author         User          @relation("AuthorPost", fields: [authorId], references: [id])
  authorId       String
  //
  // comments
  comments       PostComment[] @relation("PostComments")
  //
  // likes
  likedBy        User[]        @relation("PostLikes")
  //
}

model PostComment {
  commentId       String        @id @default(cuid())
  text            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isDeleted       Boolean       @default(false)
  // post
  post            Post          @relation("PostComments", fields: [postId], references: [id])
  postId          String
  // comment tree
  commentParentId String?
  commentParent   PostComment?  @relation("CommentParent", fields: [commentParentId], references: [commentId])
  commentChilds   PostComment[] @relation("CommentParent")
  // author
  author          User          @relation("PostCommentAuthor", fields: [authorId], references: [id])
  authorId        String
  // upvotes
  upvotedBy       User[]        @relation("PostCommentUpvotes")
  // downvotes
  downvotedBy     User[]        @relation("PostCommentDownvotes")
}

enum PostSegmentImagePosition {
  RIGHT
  BOTTOM
}

model PostSegment {
  id                 String                   @id @default(cuid())
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  title              String
  subtitle           String?
  imageId            String?
  imageFileExtension String?
  position           PostSegmentImagePosition @default(RIGHT)
  items              PostSegmentItem[]
  // for Post.segments
  post               Post                     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId             String
  //
}

model PostSegmentItem {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  content       String
  // for PostSegment.items
  postSegment   PostSegment @relation(fields: [postSegmentId], references: [id], onDelete: Cascade)
  postSegmentId String
  //
}

model PostCategory {
  id          String @id
  name        String
  description String
  posts       Post[] @relation("Post_PostCategory")
}

model PostTag {
  tagId       String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       String
  description String
  // post
  posts       Post[]
  //
}

model DonationLink {
  donationLinkId     String             @id @default(cuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  address            String
  // user relation
  user               User               @relation("UserDonationLinks", fields: [userId], references: [id])
  userId             String
  // donation provider relation
  donationProvider   DonationProvider   @relation("DonationLink_DonationProvider", fields: [donationProviderId], references: [donationProviderId])
  donationProviderId DonationProviderId
}

enum DonationProviderId {
  PAYPAL
  BITCOIN
}

model DonationProvider {
  donationProviderId DonationProviderId @id
  name               String
  // donation links relation
  donationLinks      DonationLink[]     @relation("DonationLink_DonationProvider")
}

// ########## Start of NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  // above is NextAuth.js, below is custom
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  username           String         @unique @default(cuid())
  imageId            String?
  imageBlurDataURL   String?
  imageFileExtension String?
  // posts
  posts              Post[]         @relation("AuthorPost")
  // comments
  comments           PostComment[]  @relation("PostCommentAuthor")
  // likes
  likedPosts         Post[]         @relation("PostLikes")
  // upvotes
  upvotedComments    PostComment[]  @relation("PostCommentUpvotes")
  // downvotes
  downvotedComments  PostComment[]  @relation("PostCommentDownvotes")
  // donation links
  donationLinks      DonationLink[] @relation("UserDonationLinks")
}
